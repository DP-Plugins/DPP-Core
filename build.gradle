plugins {
    id 'java'
    id 'maven-publish'
    id 'io.papermc.hangar-publish-plugin' version '0.1.3'
    id 'com.modrinth.minotaur' version '2.8.7'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.darksoldier1404'
version = '5.2.0'
def isLatest = false
def V14 = '1.16.5'
def V21 = '1.21.8'
def api_version = isLatest ? V21 : V14

repositories {
    mavenCentral()
    maven {
        url System.getenv("REPO_PUBLIC") ?: getProperty("REPO_PUBLIC")
        allowInsecureProtocol = true
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    implementation 'org.jetbrains:annotations:26.0.2'
    compileOnly "com.google.code.gson:gson:2.13.1"
    implementation "com.google.code.gson:gson:2.13.1"

    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'com.earth2me.essentials:EssentialsX:2.22.0'
    compileOnly 'net.luckperms:LuckPerms:5.5.10'
    compileOnly 'com.sk89q.worldedit:WorldEdit:7.2.13'
    compileOnly 'com.sk89q.worldguard:WorldGuard:7.0.3'

    compileOnly 'com.bukkit:craftbukkit:' + api_version
    compileOnly 'com.bukkit:spigot:' + api_version
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = isLatest ? JavaVersion.VERSION_21 : JavaVersion.VERSION_1_8
    targetCompatibility = isLatest ? JavaVersion.VERSION_21 : JavaVersion.VERSION_1_8
}

java {
    sourceCompatibility = isLatest ? JavaVersion.VERSION_21 : JavaVersion.VERSION_1_8
    targetCompatibility = isLatest ? JavaVersion.VERSION_21 : JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
}

tasks.register('renameJar') {
    def jarDir = file("$rootDir/jars")
    def moduleName = project.name
    def jarFileName = "DPP-Core-${moduleName}-${version}-SNAPSHOT.jar"
    def newJarFileName = "DPP-Core-${moduleName}-SNAPSHOT.jar"
    def originalJar = file("${jarDir}/${jarFileName}")
    def newJar = file("${jarDir}/${newJarFileName}")
    doLast {
        if (originalJar.exists()) {
            originalJar.renameTo(newJar)
            println "JAR file renamed: ${newJarFileName}"
        } else {
            throw new GradleException("Original JAR file does not exist: ${jarFileName}")
        }
    }
}

jar {
    destinationDirectory.set(file("$rootDir/jars"))
}
shadowJar {
    dependencies {
        include(dependency('com.google.code.gson:gson:2.13.1'))
    }
    archiveFileName.set("DPP-Core-${version}-SNAPSHOT.jar")
    destinationDirectory.set(file("$rootDir/jars"))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.darksoldier1404.dppc'
            artifactId = "DPP-Core"
            artifact file("$rootDir/jars/DPP-Core-${version}-SNAPSHOT.jar")
            version = "4-SNAPSHOT"
        }
    }
    repositories {
        maven {
            url System.getenv("REPO_DPP") ?: getProperty("REPO_DPP")
            allowInsecureProtocol = true
        }
    }
}

//tasks.modrinth.doFirst {
//    def upload = file("${rootDir}/jars/DPP-Core-${version}-SNAPSHOT.jar")
//    logger.lifecycle("Preparing to upload JAR: ${upload}")
//    if (!upload.exists()) {
//        throw new GradleException("Upload file does not exist: ${upload}")
//    }
//}

//hangarPublish {
//    publications {
//        register("publishPluginPublicationToHangar") {
//            version = project.version.toString()
//            channel = "Snapshot"
//            id = "DPP-Core"
//            apiKey = System.getenv("HANGAR_API_TOKEN")
//
//            platforms {
//                paper {
//                    url = "https://github.com/darksoldier1404/DPP-Core/releases"
//                    platformVersions = List.of("1.14.4", "1.15.2", "1.16.5", "1.17.1", "1.18.2", "1.19.4", "1.20.1", "1.20.6", "1.21.4", "1.21.5", "1.21.6", "1.21.7")
//                    dependencies {
//                        hangar("Essentials") {
//                            required = false
//                        }
//                        hangar("PlaceholderAPI") {
//                            required = false
//                        }
//                        url("WorldGuard", "https://dev.bukkit.org/projects/worldguard/files") {
//                            required.set(false)
//                        }
//                        url("LuckPerms", "https://luckperms.net/download") {
//                            required.set(false)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

//modrinth {
//    if (!project.hasProperty('modrinthApiKey') || !project.hasProperty('modrinthProjectId')) {
//        throw new GradleException('modrinthApiKey and modrinthProjectId must be specified in gradle.properties or as project properties.')
//    }
//
//    token = project.property('modrinthApiKey')
//    projectId = project.property('modrinthProjectId')
//    versionNumber = project.version
//    versionName = project.hasProperty('modrinthVersionTitle') ? project.property('modrinthVersionTitle') : "Release ${project.version}"
//    versionType = 'release'
//    uploadFile = project.provider {
//        def jarFile = file("${rootDir}/jars/DPP-Core-${version}-SNAPSHOT.jar")
//        logger.lifecycle("Checking for JAR: ${jarFile}")
//        if (!jarFile.exists()) {
//            throw new GradleException("Modrinth upload file does not exist: ${jarFile}")
//        }
//        jarFile
//    }
//    gameVersions = ["1.14.4", "1.15.2", "1.16.5", "1.17.1", "1.18.2", "1.19.4", "1.20.1", "1.20.6", "1.21.4", "1.21.5", "1.21.6"]
//    loaders = ['bukkit', 'spigot', 'paper', 'purpur']
//    changelog = "Release for ${project.version} supporting Minecraft 1.14.4 to 1.21.6"
//    dependencies = []
//    debugMode = false
//}